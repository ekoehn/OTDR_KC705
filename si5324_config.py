# SI5324 Configuartion Interpreter
# By Elliott Koehn
# 2019-10-03

# Takes output SI5324 Register map from DSPLLsim and places it into verilog autoconfiguartion file.

### Import packages
from os import path
import sys
import datetime
pathname = path.dirname(sys.argv[0])

#%% Custom defintion alternative to isDigit that includes hex characters
def ishex(char):
    if char.isdigit():
        return True
    elif (char >= 'A') and (char <= 'F'):
        return True
    else:
        return False

#%% Format Line for Verilog
def format_line(line, count):
    reg = ''
    data = ''
    i = True
    for c in line:
        if not ishex(c):
            if reg == '':
                continue
            else:
                i = False
        else:
            if i == True:
                reg += c
            else:
                data += c
    vline = "\t\t6'd" + str(count) + ": begin SI_DATA = {8'hD0,8'd" + reg + ",8'h" + data + "}; end\n"
    return vline

#%% Open Configuration File
while True:
    file = input('Enter the file name of the configuration, (default is ''SI5324 Config 1-1 at 200MHz''): ')
    if not file:
        file = "SI5324 Config 1-1 at 200MHz" # Default 1 to 1 at 200 MHz Clock Configuration
    elif file == "q":
        sys.exit(0)
    try:
        cfg_file = open(path.join(pathname, file + '.txt'), 'r')
    except:
        continue
    else:
        break

comment = """//////////////////////////////////////////////////////////////////////////////////
// SI5324 AutoConfig generated based on 
//        """ + file + """ generated from SI DSPLLsim software
//
// By Elliott Koehn
//
// Autogenerated on """ + str(datetime.datetime.now().strftime("%Y/%m/%d %H:%M:%S")) + """
//
//////////////////////////////////////////////////////////////////////////////////\n
module """

#%% File Settings
file = file.replace(' ', '_').replace('-', '_')
output = file + ".v"
part1 = "z1_SI5324_AutoConfig"
part2 = "z2_SI5324_AutoConfig"

#%% Create output file and write part 1
out = open(path.join(pathname, output), "w+")
p1 = open(path.join(pathname, part1), "r")
if p1.mode == 'r':
    contents = p1.read()
p1.close()
out.write(comment + file + contents)

#%% Write in register map
count = 1
default = ''
while True:
    line = cfg_file.readline()
    if not line:
        break
    if line[0] == '#':
        continue
    if line[-1] != '\n':
        line = line + '\n'
    vline = format_line(line, count)
    if count == 0:
        default = "\t\tdefault" + vline[7:]
    out.write(vline)
    count += 1
cfg_file.close()
out.write(default)

#%% Write part 2
p2 = open(path.join(pathname, part2), "r")
if p2.mode == 'r':
    contents = p2.read()
p2.close()
out.write(contents)
out.close()
sys.exit(0)